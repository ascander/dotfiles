set nocompatible
syntax on
colorscheme Tomorrow-Night-Eighties
filetype plugin on
set ai
set tabstop=2 shiftwidth=2 expandtab
set hidden
set autoread
set backspace=indent,eol,start

set nohlsearch

" show previews of substitutions
set inccommand=nosplit

" don't highlight matching parentheses/brackets
let loaded_matchparen=1

" display hybrid line numbers
" (relative but current line shows absolute line number)
set number relativenumber

" with vsplit, have new window on the right
set splitright

" with split, have new window on bottom
set splitbelow

" reaching for escape is a pain, and I don't type kj much in vim
inoremap kj <Esc>
cnoremap kj <C-c>
xnoremap kj <C-c>
snoremap kj <Esc>

set laststatus=2
let g:airline_theme='bubblegum'

" resize vsplits on window resize
" taken from http://vimbits.com/bits/268
au VimResized * exe "normal! \<c-w>="

" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
" taken from http://vimbits.com/bits/244
if isdirectory($HOME . '/.vim/swap') == 0
:silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

" spellcheck Git commit messages
autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us

let mapleader = ";"
let maplocalleader = ","

set wildignore+=.git,*.class,*/generated-code/*,*/target/*,*/dist/*

" a search like '/' but escapes special characters
command! -nargs=1 SS let @/ = '\V'.escape(<q-args>, '/\')|normal! /<C-R>/<CR>

" search for tags files in reasonable places
set tags=./.tags,.tags,./tags,tags

if &term =~ '256color'
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" Bind fzf file search to my old ctrl-p mapping because habits.
nnoremap <leader>t :Files<CR>

" ack.vim
nnoremap <leader>a :Ack! 

" undo file changes from fugitive commit view
autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>

let g:airline_powerline_fonts = 1
let g:airline_left_sep=''
let g:airline_right_sep=''

" Use ":DiffOrig" to see the differences
" between the current buffer and the file it was loaded from.
command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
\ | diffthis | wincmd p | diffthis

" completion stuff
set omnifunc=syntaxcomplete#Complete
" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

let local_vim_config = $HOME . '/.vim/vimrc.local'
if filereadable(local_vim_config)
 execute "source " . local_vim_config
endif

" configure ack.vim to use ag
if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

let g:vim_markdown_folding_disabled=1

" LSP
let g:lsc_enable_autocomplete = v:false
let g:lsc_server_commands = {
  \ 'scala': 'metals'
  \}
let g:lsc_auto_map = v:true

" rainbow parentheses
" https://github.com/luochen1990/rainbow
let g:rainbow_active = 1

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" vim-test conf
let g:test#scala#sbttest#file_pattern = '\v^(.*spec.*|.*test.*|.*suite.*)\c\.scala$'

" Warning: this is really hacky.
" SBT takes quite a while to start up, so I'd prefer to not start a fresh SBT
" session every time we try to run a test with vim-test. If we already have a
" Vimux runner available and we are trying to run an SBT command, I'm going to
" assume that the Vimux runner window already has an SBT session open, and we
" are going to use it.
function! CustomVimuxStrategy(cmd)
  if (_VimuxNearestIndex() != -1) && (a:cmd =~ '^\s*sbt')
    let l:strippedSbt = substitute(a:cmd, '\v^\s*sbt "|"$', '', 'g')
    let l:strippedDoubleQuotes = substitute(l:strippedSbt, '[^\]"', '', 'g')
    let l:unescapedDoubleQuotes = substitute(l:strippedDoubleQuotes, '\\"', '"', 'g')
    call VimuxRunCommand(l:unescapedDoubleQuotes)
  else
    call VimuxRunCommand(a:cmd)
  endif
endfunction

let g:test#custom_strategies = {'custom-vimux': function('CustomVimuxStrategy')}
let g:test#strategy = 'custom-vimux'
